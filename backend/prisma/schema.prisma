generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  username    String   @unique
  displayName String
  password    String
  avatar      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastSeen    DateTime @default(now())
  isOnline    Boolean  @default(false)
  
  // Statistics
  wins        Int      @default(0)
  losses      Int      @default(0)
  totalGames  Int      @default(0)
  
  // Relations
  sentFriendRequests     FriendRequest[] @relation("SentFriendRequests")
  receivedFriendRequests FriendRequest[] @relation("ReceivedFriendRequests")
  friends                Friend[]        @relation("UserFriends")
  friendOf               Friend[]        @relation("FriendOfUser")
  
  player1Matches Match[] @relation("Player1Matches")
  player2Matches Match[] @relation("Player2Matches")
  wonMatches     Match[] @relation("WinnerMatches")
  
  tournamentParticipations TournamentParticipant[]
  
  @@map("users")
}

model FriendRequest {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  status     String   @default("pending") // pending, accepted, rejected
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  sender   User @relation("SentFriendRequests", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("ReceivedFriendRequests", fields: [receiverId], references: [id], onDelete: Cascade)
  
  @@unique([senderId, receiverId])
  @@map("friend_requests")
}

model Friend {
  id        String   @id @default(cuid())
  userId    String
  friendId  String
  createdAt DateTime @default(now())
  
  user   User @relation("UserFriends", fields: [userId], references: [id], onDelete: Cascade)
  friend User @relation("FriendOfUser", fields: [friendId], references: [id], onDelete: Cascade)
  
  @@unique([userId, friendId])
  @@map("friends")
}

model Tournament {
  id           String   @id @default(cuid())
  name         String
  status       String   @default("registration") // registration, playing, finished
  currentRound Int      @default(1)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  participants TournamentParticipant[]
  matches      Match[]
  
  @@map("tournaments")
}

model TournamentParticipant {
  id           String @id @default(cuid())
  tournamentId String
  userId       String
  
  tournament Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([tournamentId, userId])
  @@map("tournament_participants")
}

model Match {
  id           String   @id @default(cuid())
  tournamentId String?
  player1Id    String
  player2Id    String
  winnerId     String?
  status       String   @default("pending") // pending, playing, finished
  score        String?  // JSON string: {"player1": 0, "player2": 0}
  startedAt    DateTime?
  finishedAt   DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  tournament Tournament? @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  player1    User        @relation("Player1Matches", fields: [player1Id], references: [id], onDelete: Cascade)
  player2    User        @relation("Player2Matches", fields: [player2Id], references: [id], onDelete: Cascade)
  winner     User?       @relation("WinnerMatches", fields: [winnerId], references: [id], onDelete: SetNull)
  
  @@map("matches")
}